@page "/orders/"
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize]

<h3 class="card-title">Game Orders</h3>
<br />

<a href="/orders/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Order
</a>
<br />
<br />

@if (Orders == null)
{
    <div class="alert alert-info">Loading Orders...</div>
}
else
{
    <table class="table table-responsive" id="ordersTable">
        <thead>
            <tr>
                <th>Order Number</th>
                <th>Placed By</th>
                <th>Deliver To</th>
                <th>Date Placed</th>
                <th>Days Until Arrival</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in Orders)
            {
                <tr>
                    <td>@order.OrderNo</td>
                    <td>@order.Customer.CustName</td>
                    <td>@order.ShippingAddress.ShipAddress</td>
                    <td>@order.DateCreated.Date.ToString("dd MMMM yyyy")</td>
                    <td>@(order.DateIn != nullDT ? (order.DateIn - order.DateOut).TotalDays.ToString() : "To Be Determined")</td>
                    <td>
                        <a href="/orders/view/@order.ID" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/orders/edit/@order.ID" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(order.ID))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<Order> Orders;

    private DateTime nullDT = new DateTime(1, 1, 1, 0, 0, 0);

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Orders = await _client.GetFromJsonAsync<List<Order>>($"{Endpoints.OrdersEndpoint}");
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#ordersTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#ordersTable");
        _interceptor.DisposeEvent();
    }

    async Task Delete(int orderId)
    {
        var order = Orders.First(q => q.ID == orderId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {order.OrderNo}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.OrdersEndpoint}/{orderId}");
            await OnInitializedAsync();
        }
    }
}

