@page "/products/"
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize]

<h3 class="card-title">GamingProducts</h3>
<br />

<a href="/products/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create Product
</a>
<br />
<br />

@if (GamingProducts == null)
{
    <div class="alert alert-info">Loading GamingProducts...</div>
}
else
{
    <table class="table table-responsive" id="productsTable">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Category Name</th>
                <th>Description</th>
                <th>Cost</th>
                <th>Stock</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in GamingProducts)
            {
                <tr>
                    <td>@product.ProdName</td>
                    <td>@product.Category.CategoryName</td>
                    <td>@product.ProdDesc</td>
                    <td>@product.ProdCost</td>
                    <td>@product.ProdStock</td>
                    <td>
                        <a href="/products/view/@product.ID" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/products/edit/@product.ID" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(product.ID))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<GamingProduct> GamingProducts;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        GamingProducts = await _client.GetFromJsonAsync<List<GamingProduct>>($"{Endpoints.GamingProductsEndpoint}");
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#productsTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#productsTable");
        _interceptor.DisposeEvent();
    }

    async Task Delete(int productId)
    {
        var product = GamingProducts.First(q => q.ID == productId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {product.ProdName}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.GamingProductsEndpoint}/{productId}");
            await OnInitializedAsync();
        }
    }
}

