@page "/products/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Add Product</h3>
<hr />
<br />

<EditForm Model="@product" OnValidSubmit="CreateGamingProduct">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Product Name: </label>
        <div>
            <InputText @bind-Value="@product.ProdName" class="form-control" />
            <ValidationMessage For="@(() => product.ProdName)" />
        </div>
    </div>

    <div class="form-group">
        <label>Category: </label>
        <div>
            <InputSelect @bind-Value="product.CategoryID" class="form-control">
                <option value="">-- Select Category --</option>
                @if (Categories != null)
                {
                    foreach (var category in Categories)
                    {
                        <option value="@category.ID">@category.CategoryName</option>}
                }
            </InputSelect>
            <ValidationMessage For="@(() => product.CategoryID)" />
        </div>
    </div>

    <div class="form-group">
        <label>Product Description: </label>
        <div>
            <InputTextArea @bind-Value="@product.ProdDesc" class="form-control" />
            <ValidationMessage For="@(() => product.ProdDesc)" />
        </div>
    </div>

    <div class="form-group">
        <label>Product Cost: </label>
        <div>
            <InputNumber @bind-Value="@product.ProdCost" class="form-control" />
            <ValidationMessage For="@(() => product.ProdCost)" />
        </div>
    </div>

    <div class="form-group">
        <label>Product Stock: </label>
        <div>
            <InputNumber @bind-Value="@product.ProdStock" class="form-control" />
            <ValidationMessage For="@(() => product.ProdStock)" />
        </div>
    </div>

    <button type="submit" class="btn btn-success btn-block">
        Create Product
    </button>

</EditForm>

@code {

    GamingProduct product = new GamingProduct();

    private IList<Category> Categories;

    protected async override Task OnInitializedAsync()
    {
        Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
    }

    private async Task CreateGamingProduct()
    {
        await _client.PostAsJsonAsync(Endpoints.GamingProductsEndpoint, product);
        _navManager.NavigateTo("/products/");
    }
}
